FIND_PACKAGE(Lua51 REQUIRED)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR} ${LUA_INCLUDE_DIR})

FILE(GLOB HEADER src/*.h include/*.h)
FILE(GLOB SRC src/*.cpp *.rc)
FILE(GLOB UI ui/*.ui)
FILE(GLOB QRC *.qrc)
FILE(GLOB TS *.ts)
FILE(GLOB ICONS misc/*.icns)

# Generate .cpp from .qrc
QT4_ADD_RESOURCES(QRC_SRC ${QRC})

# Generate .h from .ui
QT4_WRAP_UI(UI_HEADERS ${UI})

# Generate .cxx from .h
QT4_WRAP_CPP(MOC_SRC ${HEADER})

IF(WITH_UPDATE_TRANSLATIONS)
  # Create or update TS files and generate QM files
  SET(TRANS ${SRC} ${UI} ${HEADER})
  QT4_CREATE_TRANSLATION(QM ${TRANS} ${TS})
ELSE(WITH_UPDATE_TRANSLATIONS)
  # Only generate QM files
  QT4_ADD_TRANSLATION(QM ${TS})
ENDIF(WITH_UPDATE_TRANSLATIONS)

SOURCE_GROUP("generated" FILES ${UI_HEADERS} ${QRC_SRC} ${MOC_SRC})
SOURCE_GROUP("res" FILES ${QRC})
SOURCE_GROUP("include" FILES ${HEADER})
SOURCE_GROUP("src" FILES ${SRC})
SOURCE_GROUP("ui" FILES ${UI})
SOURCE_GROUP("ts" FILES ${TS} ${QM})

IF(WITH_STATIC_EXTERNAL)
	# If using static Qt, also use static plugins
	ADD_DEFINITIONS(-DQT_STATICPLUGIN)
ENDIF(WITH_STATIC_EXTERNAL)

IF(APPLE)
	SET(MAC_RESOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/misc)

	SET(MACOSX_BUNDLE_INFO_STRING ${PRODUCT})
	SET(MACOSX_BUNDLE_ICON_FILE "ceb.icns")
	SET(MACOSX_BUNDLE_GUI_IDENTIFIER "org.melting-pot.cebmtpchat")
	SET(MACOSX_BUNDLE_LONG_VERSION_STRING "${PRODUCT} version ${VERSION}")
	SET(MACOSX_BUNDLE_BUNDLE_NAME ${PRODUCT})
	SET(MACOSX_BUNDLE_SHORT_VERSION_STRING ${VERSION})
	SET(MACOSX_BUNDLE_BUNDLE_VERSION ${VERSION})
	SET(MACOSX_BUNDLE_COPYRIGHT "Copyright ${YEAR} ${AUTHOR}")
ENDIF(APPLE)

IF(PLUGIN)
	ADD_DEFINITIONS(-DQT_PLUGIN)
	ADD_DEFINITIONS(-DQT_SHARED)
	ADD_DEFINITIONS(-DQT_NO_DEBUG)
	SET_TARGET_PLUGIN(${TARGET} ${SRC} ${QRC_SRC} ${MOC_SRC} ${UI_HEADERS} ${HEADER} ${TS})
ELSE(PLUGIN)
	SET_TARGET_GUI_EXECUTABLE(${TARGET} ${SRC} ${QRC_SRC} ${MOC_SRC} ${UI_HEADERS} ${HEADER} ${TS} ${QM} ${ICONS})
ENDIF(PLUGIN)

TARGET_LINK_LIBRARIES(${TARGET} max ${QT_LIBRARIES} ${LUA_LIBRARIES} ${QT_QSVGICON_LIBRARY})

IF(APPLE)
	FIND_LIBRARY(FOUNDATION_FRAMEWORK Foundation)
	FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
	FIND_LIBRARY(CARBON_FRAMEWORK Carbon)
	FIND_LIBRARY(SYSTEMCONFIGURATION_FRAMEWORK SystemConfiguration)
	FIND_LIBRARY(SECURITY_FRAMEWORK Security)
	TARGET_LINK_LIBRARIES(${TARGET} ${FOUNDATION_FRAMEWORK} ${COCOA_FRAMEWORK} ${CARBON_FRAMEWORK} ${SYSTEMCONFIGURATION_FRAMEWORK} ${SECURITY_FRAMEWORK})
ENDIF(APPLE)

ADD_DEFINITIONS(${QT_DEFINITIONS})

IF(MINGW)
	# resource compilation for MinGW
	ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ceb_rc.o
		COMMAND windres.exe -I${CMAKE_CURRENT_SOURCE_DIR} -i${CMAKE_CURRENT_SOURCE_DIR}/ceb.rc
		-o ${CMAKE_CURRENT_BINARY_DIR}/ceb_rc.o )
	SET(CEB_SRCS ${CEB_SRCS} ${CMAKE_CURRENT_BINARY_DIR}/ceb_rc.o)
ENDIF(MINGW)

# translations
ADD_CUSTOM_TARGET("translations" ALL DEPENDS ${QM})

IF(WITH_PCH)
  ADD_NATIVE_PRECOMPILED_HEADER(${TARGET} ${CMAKE_CURRENT_SOURCE_DIR}/src/common.h ${CMAKE_CURRENT_SOURCE_DIR}/src/common.cpp)
ENDIF(WITH_PCH)

IF(APPLE)
  # Manually copy all files in Mac OS X Bundle
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND mkdir -p ${RESOURCES_DIR}/profiles)
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/default_*.xml ${RESOURCES_DIR}/profiles)
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/ceb_ryzom.ini ${RESOURCES_DIR}/ceb.ini)

  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp -R ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/scripts ${RESOURCES_DIR})
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp -R ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/modifiers ${RESOURCES_DIR})
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp -R ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/resources ${RESOURCES_DIR})
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/LICENCE ${RESOURCES_DIR})
  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND cp ${CMAKE_CURRENT_SOURCE_DIR}/share/ceb/whatsnew.html ${RESOURCES_DIR})

  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD COMMAND find ${RESOURCES_DIR} -name .svn -print0 | xargs -0 rm -rf)
ELSE(APPLE)
  INSTALL(FILES ${QM} DESTINATION ${SHARE_PREFIX}/translations)
  INSTALL(FILES share/ceb/ceb_ryzom.ini DESTINATION ${SHARE_PREFIX} RENAME ceb.ini)
  
  FILE(GLOB PROFILES share/ceb/default_*.xml)
  INSTALL(FILES ${PROFILES} DESTINATION ${SHARE_PREFIX}/profiles)

  INSTALL(DIRECTORY share/ceb/scripts DESTINATION ${SHARE_PREFIX})
  INSTALL(DIRECTORY share/ceb/modifiers DESTINATION ${SHARE_PREFIX})
  INSTALL(DIRECTORY share/ceb/resources DESTINATION ${SHARE_PREFIX})
  INSTALL(FILES share/ceb/LICENCE share/ceb/whatsnew.html DESTINATION ${SHARE_PREFIX})

  IF(UNIX)
    INSTALL(FILES images/ceb.xpm DESTINATION share/pixmaps)
    INSTALL(FILES images/ceb_16x16.png DESTINATION share/icons/hicolor/16x16/apps RENAME ceb.png)
    INSTALL(FILES images/ceb_22x22.png DESTINATION share/icons/hicolor/22x22/apps RENAME ceb.png)
    INSTALL(FILES images/ceb_24x24.png DESTINATION share/icons/hicolor/24x24/apps RENAME ceb.png)
    INSTALL(FILES images/ceb_32x32.png DESTINATION share/icons/hicolor/32x32/apps RENAME ceb.png)
    INSTALL(FILES images/ceb_48x48.png DESTINATION share/icons/hicolor/48x48/apps RENAME ceb.png)
    INSTALL(FILES images/ceb_128x128.png DESTINATION share/icons/hicolor/128x128/apps RENAME ceb.png)
    INSTALL(FILES images/ceb.svg DESTINATION share/icons/hicolor/scalable/apps RENAME ceb.svg)
    INSTALL(FILES share/applications/ceb.desktop DESTINATION share/applications)
  ENDIF(UNIX)
ENDIF(APPLE)
